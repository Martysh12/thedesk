/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i notifications_adaptor.h -a :notifications_adaptor.cpp ../../../theDesk/plugins/NotificationsPlugin/dbus/org.freedesktop.Notifications.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "notifications_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include "notificationsinterface.h"

/*
 * Implementation of adaptor class NotificationsAdaptor
 */

NotificationsAdaptor::NotificationsAdaptor(QObject* parent)
    : QDBusAbstractAdaptor(parent) {
    // constructor
    setAutoRelaySignals(true);
}

NotificationsAdaptor::~NotificationsAdaptor() {
    // destructor
}

void NotificationsAdaptor::CloseNotification(uint id) {
    // handle method call org.freedesktop.Notifications.CloseNotification
    QMetaObject::invokeMethod(parent(), "CloseNotification", Q_ARG(uint, id));
}

QStringList NotificationsAdaptor::GetCapabilities() {
    // handle method call org.freedesktop.Notifications.GetCapabilities
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "GetCapabilities", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

QString NotificationsAdaptor::GetServerInformation(QString& vendor, QString& version, QString& specVersion) {
    // handle method call org.freedesktop.Notifications.GetServerInformation
    return static_cast<NotificationsInterface*>(parent())->GetServerInformation(vendor, version, specVersion);
}

uint NotificationsAdaptor::Notify(const QString& appName, uint replacesId, const QString& appIcon, const QString& summary, const QString& body, const QStringList& actions, const QVariantMap& hints, int expireTimeout) {
    // handle method call org.freedesktop.Notifications.Notify
    uint out0;
    QMetaObject::invokeMethod(parent(), "Notify", Q_RETURN_ARG(uint, out0), Q_ARG(QString, appName), Q_ARG(uint, replacesId), Q_ARG(QString, appIcon), Q_ARG(QString, summary), Q_ARG(QString, body), Q_ARG(QStringList, actions), Q_ARG(QVariantMap, hints), Q_ARG(int, expireTimeout));
    return out0;
}

